---
title: "Project Verification Dashboard"
format: html
execute:
  echo: false
---

```{python, results:'asis', echo: false}
import os
import json

# Find project directories: directories that have both 'images' and 'basemap' subfolders.
project_dirs = [d for d in os.listdir('.') if os.path.isdir(d) and 
                os.path.exists(os.path.join(d, 'images')) and os.path.exists(os.path.join(d, 'basemap'))]

project_dirs = ['birdlife', 'icraf', 'arcos']
projects_data = {}

for proj in sorted(project_dirs):
    images_folder = os.path.join(proj, "images")
    basemap_folder = os.path.join(proj, "basemap")
    images_files = sorted([f for f in os.listdir(images_folder) if f.lower().endswith('.png')])
    basemap_files = sorted([f for f in os.listdir(basemap_folder) if f.lower().endswith('.png')])
    
    # Create mapping from file base name (without extension) to filename.
    images_base = {os.path.splitext(f)[0]: f for f in images_files}
    basemap_base = {os.path.splitext(f)[0]: f for f in basemap_files}
    
    # Find common bases and group by UUID.
    common_bases = set(images_base.keys()).intersection(basemap_base.keys())
    pairs = {}
    for base in common_bases:
        parts = base.split('_')
        if len(parts) < 3:
            continue
        uuid = parts[2]
        date = parts[1]
        if uuid not in pairs:
            pairs[uuid] = {"dates": {}}
        pairs[uuid]["dates"][date] = {
            "a": os.path.join(proj, "images", images_base[base]),
            "b": os.path.join(proj, "basemap", basemap_base[base])
        }
    projects_data[proj] = pairs

# Write the JavaScript variable to file.
js_variable = "const projectsData = " + json.dumps(projects_data, indent=2) + ";"
with open("projectsData.js", "w") as f:
    f.write(js_variable)
```

```{=html}
<script src="projectsData.js"></script>
<style>
  body {
    font-family: Arial, sans-serif;
    padding: 20px;
    background-color: #f8f8f8;
  }
  
  /* Dashboard layout: left panel for options, right panel for image container */
  #dashboardLayout {
    display: flex;
    gap: 20px;
    margin-top: 20px;
  }
  
  #leftPanel {
    flex: 0 0 300px; /* Fixed width for the options panel */
    padding: 10px;
    background: #fff;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  #rightPanel {
    flex: 1;
  }
  
  /* Styling for form elements within the left panel */
  label {
    font-weight: bold;
    margin-top: 10px;
    display: block;
  }
  
  select, button {
    padding: 8px 12px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin-top: 5px;
    background-color: #fff;
    width: 100%;
  }
  
  button {
    cursor: pointer;
  }
  
  button:hover {
    background-color: #e0e0e0;
  }
  
  /* Date toggle buttons */
  #dateButtons button {
    margin: 5px 0;
    width: 100%;
  }
  
  /* Active state for date buttons */
  #dateButtons button.active {
    background-color: #4285f4;
    color: white;
    border-color: #4285f4;
  }
  
  /* Button rows for grouping side-by-side buttons */
  .buttonRow {
    display: flex;
    gap: 10px;
    margin-top: 5px;
  }
  
  .buttonRow button {
    flex: 1; /* Make both buttons occupy equal width */
  }
  
  /* Image container styling */
  #imageContainer {
    width: 100%;
    height: 90%;
    overflow: hidden;
    border: 1px solid #ddd;
    border-radius: 4px;
    position: relative;
    background-color: #fff;
  }
  
  /* The image itself */
  #toggleImage {
    position: absolute;
    transform-origin: top left;
    transition: transform 0.2s ease-out;
    user-select: none;
    cursor: grab;
  }
  
  /* Change cursor during dragging */
  #toggleImage.dragging {
    cursor: grabbing;
    transition: none;
  }

  /* Tree Count Overview Table Style */
  #treesTable {
    width: 100%;
    margin-top: 10px;
    border-collapse: collapse;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
  }

  #treesTable th,
  #treesTable td {
    padding: 8px;
    border: 1px solid #ddd;
    text-align: left;
  }

  #treesTable th {
    background-color: #f8f8f8;
    font-weight: bold;
  }

  #treesTable tfoot td {
    font-weight: bold;
    background-color: #f8f8f8;
  }
</style>

<div id="dashboardLayout">
  <div id="leftPanel">
    <!-- Project dropdown -->
    <label for="projectSelect">Select Project:</label>
    <select id="projectSelect">
      <!-- Options will be populated dynamically -->
    </select>

    <!-- Site dropdown -->
    <label for="imageSelect">Project Site:</label>
    <select id="imageSelect">
      <!-- Options will be populated dynamically -->
    </select>

    <!-- Date buttons -->
    <label>Date of Satellite Image:</label>
    <div id="dateButtons">
      <!-- Date buttons will be populated dynamically -->
    </div>

    <!-- Control Buttons -->
    <button id="toggleBtn">Show / Hide Trees</button>

    <!-- Zoom buttons side by side -->
    <div class="buttonRow">
      <button id="zoomInBtn">Zoom In</button>
      <button id="zoomOutBtn">Zoom Out</button>
      <button id="resetPanBtn">Reset Img</button>
    </div>
    
    <!-- Previous, Next, and Reset buttons side by side -->
	<div class="buttonRow">
	  <button id="prevSiteBtn">Previous Site</button>
	  <button id="nextSiteBtn">Next Site</button>
	  
	</div>

    <!-- Tree Count Overview Table -->
  <label>Tree Count Overview</label>
  <table id="treesTable" style="width: 100%; margin-top: 10px; border-collapse: collapse;">
    <thead>
      <tr>
        <th style="border: 1px solid #ccc; padding: 5px;">Image Date</th>
        <th style="border: 1px solid #ccc; padding: 5px;">Number of Trees</th>
      </tr>
    </thead>
    <tbody>
      <!-- Table rows will be dynamically generated -->
    </tbody>
    <tfoot>
      <tr>
        <td style="border: 1px solid #ccc; padding: 5px; font-weight: bold;">Total change</td>
        <td style="border: 1px solid #ccc; padding: 5px; font-weight: bold;">+ X trees</td>
      </tr>
    </tfoot>
  </table>

  </div>
  
  <div id="rightPanel">
    <div id="imageContainer">
      <img id="toggleImage" src="" alt="Image Toggle">
    </div>
  </div>
</div>

<script>
  // ---------------------------
  // DOM element references for dropdowns, image and buttons
  // ---------------------------
  const projectSelect = document.getElementById("projectSelect");
  const imageSelect = document.getElementById("imageSelect");
  const dateButtonsContainer = document.getElementById("dateButtons");
  const imageElement = document.getElementById("toggleImage");
  const toggleButton = document.getElementById("toggleBtn");
  const randomButton = document.getElementById("randomBtn");
  const zoomInBtn = document.getElementById("zoomInBtn");
  const zoomOutBtn = document.getElementById("zoomOutBtn");
  const resetPanBtn = document.getElementById("resetPanBtn");
  const container = document.getElementById("imageContainer");

  // ---------------------------
  // Populate the project dropdown from projectsData
  // ---------------------------
  for (const project in projectsData) {
    const option = document.createElement("option");
    option.value = project;
    option.textContent = project;
    projectSelect.appendChild(option);
  }
  
  // ---------------------------
  // Populate the site dropdown based on the selected project
  // ---------------------------
  function updateImageSelect() {
    const selectedProject = projectSelect.value;
    const projectData = projectsData[selectedProject];
    imageSelect.innerHTML = ""; // Clear previous options
    for (const uuid in projectData) {
      const option = document.createElement("option");
      option.value = uuid;
      option.textContent = uuid;
      imageSelect.appendChild(option);
    }
  }

  // ----------------------
  // UPDATE THE TREE TABLE
  // ----------------------
  // Helper function to extract the tree count from the file name.
  function extractTreeCount(filePath) {
    // Get just the file name from the full path.
    const fileName = filePath.split('/').pop();
    // Remove the extension.
    const baseName = fileName.replace('.png', '');
    // Split the base name by underscore.
    const parts = baseName.split('_');
    // If there are four parts, the fourth part contains the tree count.
    if (parts.length === 4) {
      return parts[3];
    }
    return "";
  }

  function updateTreesTable() {
    const selectedProject = projectSelect.value;
    const uuid = imageSelect.value;
    const tableBody = document.querySelector("#treesTable tbody");
    // Clear any previous rows.
    tableBody.innerHTML = "";
    
    // Check that data exists for the selected project and site.
    if (projectsData[selectedProject] && projectsData[selectedProject][uuid]) {
      // Get dates (sorted).
      const dates = Object.keys(projectsData[selectedProject][uuid].dates).sort();
      
      // Loop through each date and populate a table row.
      dates.forEach(date => {
        const tr = document.createElement("tr");

        // Create the "Image Date" cell.
        const tdDate = document.createElement("td");
        tdDate.textContent = date;
        tdDate.style.border = "1px solid #ccc";
        tdDate.style.padding = "5px";
        
        // Extract the tree count from the file name in the 'a' image.
        const pair = projectsData[selectedProject][uuid].dates[date];
        let treeCount = "";
        if (pair && pair.a) {
          treeCount = extractTreeCount(pair.a);
        }
        
        // Create the "Number of Trees" cell.
        const tdValue = document.createElement("td");
        tdValue.textContent = treeCount; // Shows the value if found, or remains empty.
        tdValue.style.border = "1px solid #ccc";
        tdValue.style.padding = "5px";
        
        tr.appendChild(tdDate);
        tr.appendChild(tdValue);
        tableBody.appendChild(tr);
      });
    }
  }

  
  // ---------------------------
  // Update the date buttons based on the selected site (UUID) within the selected project.
  // ---------------------------
  function updateDateButtons(resetPanOnFirst = false) {
    const selectedProject = projectSelect.value;
    const uuid = imageSelect.value;
    if (!projectsData[selectedProject] || !projectsData[selectedProject][uuid]) {
      dateButtonsContainer.innerHTML = "";
      return;
    }
    const dates = Object.keys(projectsData[selectedProject][uuid].dates).sort();
    dateButtonsContainer.innerHTML = ""; // Clear previous buttons
    dates.forEach(date => {
      const btn = document.createElement("button");
      btn.textContent = date;
      btn.dataset.date = date;
      btn.addEventListener("click", function() {
        // Remove active class from all buttons
        Array.from(dateButtonsContainer.children).forEach(b => b.classList.remove("active"));
        btn.classList.add("active");
        // For date toggling, do not reset pan/zoom.
        updateImagePairForDate(date, false);
      });
      dateButtonsContainer.appendChild(btn);
    });
    // Automatically activate the first date button if available.
    if (dates.length > 0) {
      dateButtonsContainer.children[0].classList.add("active");
      updateImagePairForDate(dates[0], resetPanOnFirst);
    }
    updateTreesTable();
  }
  
  // ---------------------------
  // State variables for zoom, pan and current image pair
  // ---------------------------
  let currentPair = null;
  let showingA = true;
  let scale = 1;       // Current scale (set by fitting image to container)
  let offsetX = 0;     // Pan offset in pixels
  let offsetY = 0;
  let minScale = 1;    // Minimum scale (set when image is fitted)
  
  // ---------------------------
  // Update transform based on scale and pan offsets
  // ---------------------------
  function updateTransform() {
    imageElement.style.transform = "translate(" + offsetX + "px, " + offsetY + "px) scale(" + scale + ")";
  }
  
  // ---------------------------
  // Fit the image into the container and set minScale.
  // ---------------------------
  function fitImageToContainer() {
    const containerRect = container.getBoundingClientRect();
    const containerWidth = containerRect.width;
    const containerHeight = containerRect.height;
    const imgNaturalWidth = imageElement.naturalWidth;
    const imgNaturalHeight = imageElement.naturalHeight;
    
    // Compute the base scale to fit the image.
    const baseScale = Math.min(containerWidth / imgNaturalWidth, containerHeight / imgNaturalHeight);
    scale = baseScale;
    minScale = baseScale; // Set the minimum allowed scale.
    
    // Center the image.
    offsetX = (containerWidth - imgNaturalWidth * scale) / 2;
    offsetY = (containerHeight - imgNaturalHeight * scale) / 2;
    updateTransform();
  }
  
  // ---------------------------
  // Update image pair for a given date, optionally resetting zoom/pan.
  // ---------------------------
  function updateImagePairForDate(date, resetPan = false) {
    const selectedProject = projectSelect.value;
    const uuid = imageSelect.value;
    currentPair = projectsData[selectedProject][uuid].dates[date];
    showingA = true;
    if (resetPan) {
      // Wait for the new image to load before fitting it into the container.
      imageElement.onload = function() {
        fitImageToContainer();
        imageElement.onload = null;
      };
    }
    imageElement.src = currentPair.a;
  }
  
  // ---------------------------
  // Event listener for when the project changes.
  // ---------------------------
  projectSelect.addEventListener("change", function() {
    updateImageSelect();
    updateDateButtons(true); // Reset pan/zoom for new project/site.
  });
  
  // ---------------------------
  // Event listener for when the site (UUID) changes.
  // ---------------------------
  imageSelect.addEventListener("change", function() {
    updateDateButtons(true);
  });
  
  // ---------------------------
  // Toggle image between 'a' and 'b' without resetting zoom/pan.
  // ---------------------------
  function toggleImage() {
    imageElement.onload = null; // Prevent resetting zoom/pan
    if (showingA) {
      imageElement.src = currentPair.b;
    } else {
      imageElement.src = currentPair.a;
    }
    showingA = !showingA;
  }
  
  // ---------------------------
  // Random selection: pick a random project and a random site within it.
  // ---------------------------
  function chooseRandom() {
    // Choose a random project.
    const projects = Object.keys(projectsData);
    const randomProject = projects[Math.floor(Math.random() * projects.length)];
    projectSelect.value = randomProject;
    updateImageSelect();
    // Choose a random site (UUID) within that project.
    const uuids = Object.keys(projectsData[randomProject]);
    imageSelect.value = uuids[Math.floor(Math.random() * uuids.length)];
    updateDateButtons(true);
  }
  
  // ---------------------------
  // Zoom functions for buttons (using container center as pivot)
  // ---------------------------
  function zoomInButton() {
    const containerRect = container.getBoundingClientRect();
    const centerX = containerRect.width / 2;
    const centerY = containerRect.height / 2;
    const factor = 1.1;
    const newScale = scale * factor;
    offsetX = centerX - ((centerX - offsetX) * newScale / scale);
    offsetY = centerY - ((centerY - offsetY) * newScale / scale);
    scale = newScale;
    updateTransform();
  }
  
  function zoomOutButton() {
    const containerRect = container.getBoundingClientRect();
    const centerX = containerRect.width / 2;
    const centerY = containerRect.height / 2;
    const factor = 1.1;
    let newScale = scale / factor;
    // Clamp the scale so it never goes below minScale.
    if (newScale < minScale) {
      newScale = minScale;
    }
    offsetX = centerX - ((centerX - offsetX) * newScale / scale);
    offsetY = centerY - ((centerY - offsetY) * newScale / scale);
    scale = newScale;
    updateTransform();
  }
  
  // ---------------------------
  // Reset pan (and refit image) -- used when the site or project changes.
  // ---------------------------
  function resetPan() {
    fitImageToContainer();
  }
  
  // ---------------------------
  // Panning via mouse dragging
  // ---------------------------
  let isPanning = false;
  let startX, startY;
  let startOffsetX, startOffsetY;
  
  imageElement.addEventListener("mousedown", function(e) {
    isPanning = true;
    imageElement.classList.add("dragging");
    startX = e.clientX;
    startY = e.clientY;
    startOffsetX = offsetX;
    startOffsetY = offsetY;
    e.preventDefault();
  });
  
  document.addEventListener("mousemove", function(e) {
    if (!isPanning) return;
    const dx = e.clientX - startX;
    const dy = e.clientY - startY;
    offsetX = startOffsetX + dx;
    offsetY = startOffsetY + dy;
    updateTransform();
  });
  
  document.addEventListener("mouseup", function() {
    if (isPanning) {
      isPanning = false;
      imageElement.classList.remove("dragging");
    }
  });
  
  // ---------------------------
  // Zooming with the scroll wheel (centered on mouse pointer)
  // ---------------------------
  container.addEventListener("wheel", function(e) {
    e.preventDefault();
    const containerRect = container.getBoundingClientRect();
    const mouseX = e.clientX - containerRect.left;
    const mouseY = e.clientY - containerRect.top;
    const factor = e.deltaY < 0 ? 1.05 : 1 / 1.05;
    let newScale = scale * factor;
    if (newScale < minScale) {
      newScale = minScale;
    }
    offsetX = mouseX - ((mouseX - offsetX) * newScale / scale);
    offsetY = mouseY - ((mouseY - offsetY) * newScale / scale);
    scale = newScale;
    updateTransform();
  });
  
  // ---------------------------
  // Attach event listeners for buttons.
  // ---------------------------
  toggleButton.addEventListener("click", toggleImage);
  // randomButton.addEventListener("click", chooseRandom);
  zoomInBtn.addEventListener("click", zoomInButton);
  zoomOutBtn.addEventListener("click", zoomOutButton);
  resetPanBtn.addEventListener("click", resetPan);

  const prevSiteBtn = document.getElementById("prevSiteBtn");
	const nextSiteBtn = document.getElementById("nextSiteBtn");

	// Event listener for Previous Site button.
	prevSiteBtn.addEventListener("click", function() {
	  // If not at the first site, select the previous option.
	  if (imageSelect.selectedIndex > 0) {
	    imageSelect.selectedIndex--;
	    updateDateButtons(true);
	  }
	});

	// Event listener for Next Site button.
	nextSiteBtn.addEventListener("click", function() {
	  // If not at the last site, select the next option.
	  if (imageSelect.selectedIndex < imageSelect.options.length - 1) {
	    imageSelect.selectedIndex++;
	    updateDateButtons(true);
	  }
	});
  
  // ---------------------------
  // Initialize: populate site dropdown and update date buttons.
  // ---------------------------
  updateImageSelect();
  updateDateButtons(true);
</script>
```