---
title: "MRV dashboard for Birdlife International"
format: html
execute:
  echo: false
---



```{python, results:'asis', echo: false}
import os
import json
import sys


# Define the two folders
images_folder = "images"
basemap_folder = "basemap"

# List .png files in both directories (adjust the extension if needed)
images_files = sorted([f for f in os.listdir(images_folder) if f.lower().endswith('.png')])
basemap_files = sorted([f for f in os.listdir(basemap_folder) if f.lower().endswith('.png')])

# Create dictionaries with the base filename (without extension) as the key
images_base = {os.path.splitext(f)[0]: f for f in images_files}
basemap_base = {os.path.splitext(f)[0]: f for f in basemap_files}

# Determine common bases between the two folders
common_bases = set(images_base.keys()).intersection(basemap_base.keys())

# Build a dictionary of pairs where the key is the base filename
pairs = {}
for base in common_bases:
    pairs[base] = {
        "a": os.path.join(images_folder, images_base[base]),
        "b": os.path.join(basemap_folder, basemap_base[base])
    }

# Create a JavaScript variable assignment from the dictionary
js_variable = "const imagePairs = " + json.dumps(pairs, indent=2) + ";"

# Write out the JavaScript file (this file will be created in the same directory as your document)
with open("imagePairs.js", "w") as f:
    f.write(js_variable)
```
<script src="imagePairs.js"></script>

<style>
  body {
    font-family: Arial, sans-serif;
    padding: 20px;
    background-color: #f8f8f8;
  }
  
  label {
    font-weight: bold;
    margin-right: 10px;
  }
  
  select, button {
    padding: 8px 12px;
    font-size: 16px;
    border: 1px solid #ccc;
    border-radius: 4px;
    margin: 10px 5px 10px 0;
    background-color: #fff;
  }
  
  button {
    cursor: pointer;
  }
  
  button:hover {
    background-color: #e0e0e0;
  }
  
  /* Fixed container for the image */
  #imageContainer {
    width: 600px;
    height: 400px;
    overflow: hidden;
    border: 1px solid #ddd;
    border-radius: 4px;
    position: relative;
    margin-top: 20px;
  }
  
  /* The image itself */
  #toggleImage {
    position: absolute;
    transform-origin: top left;
    transition: transform 0.2s ease-out;
    user-select: none;
    cursor: grab;
  }
  
  /* Change cursor during dragging */
  #toggleImage.dragging {
    cursor: grabbing;
    transition: none;
  }
</style>

<!-- Dropdown for selecting the image pair -->
<label for="imageSelect">Choose an image set:</label>
<select id="imageSelect">
  <!-- Options will be populated dynamically -->
</select>

<br>

<!-- Buttons for toggling images, random selection, zoom controls, and pan reset -->
<button id="toggleBtn">Toggle Image</button>
<button id="randomBtn">Random</button>
<button id="zoomInBtn">Zoom In</button>
<button id="zoomOutBtn">Zoom Out</button>
<button id="resetPanBtn">Reset Pan</button>

<br>

<!-- Fixed container for the image -->
<div id="imageContainer">
  <img id="toggleImage" src="" alt="Image Toggle">
</div>

<script>
  // ---------------------------
  // Populate dropdown using keys from imagePairs
  // ---------------------------
  const imageSelect = document.getElementById("imageSelect");
  for (const key in imagePairs) {
    const option = document.createElement("option");
    option.value = key;
    option.textContent = key;
    imageSelect.appendChild(option);
  }

  // ---------------------------
  // DOM element references
  // ---------------------------
  const imageElement = document.getElementById("toggleImage");
  const toggleButton = document.getElementById("toggleBtn");
  const randomButton = document.getElementById("randomBtn");
  const zoomInBtn = document.getElementById("zoomInBtn");
  const zoomOutBtn = document.getElementById("zoomOutBtn");
  const resetPanBtn = document.getElementById("resetPanBtn");
  const container = document.getElementById("imageContainer");

  // ---------------------------
  // State variables for zoom & pan
  // ---------------------------
  let currentPair = imagePairs[imageSelect.value];
  let showingA = true;
  let scale = 1;       // Current scale (set by fitting image to container)
  let offsetX = 0;     // Pan offset in pixels
  let offsetY = 0;

  // ---------------------------
  // Update transform based on scale and pan offsets
  // ---------------------------
  function updateTransform() {
    imageElement.style.transform = "translate(" + offsetX + "px, " + offsetY + "px) scale(" + scale + ")";
  }

  // ---------------------------
  // Fit the image into the container initially
  // ---------------------------
  function fitImageToContainer() {
    const containerRect = container.getBoundingClientRect();
    const containerWidth = containerRect.width;
    const containerHeight = containerRect.height;
    const imgNaturalWidth = imageElement.naturalWidth;
    const imgNaturalHeight = imageElement.naturalHeight;
    
    // Compute the base scale to fit the image
    const baseScale = Math.min(containerWidth / imgNaturalWidth, containerHeight / imgNaturalHeight);
    scale = baseScale;
    // Center the image
    offsetX = (containerWidth - imgNaturalWidth * scale) / 2;
    offsetY = (containerHeight - imgNaturalHeight * scale) / 2;
    updateTransform();
  }

  // ---------------------------
  // Update image pair from dropdown (reset zoom/pan)
  // ---------------------------
  function updateImagePair() {
    currentPair = imagePairs[imageSelect.value];
    showingA = true;
    imageElement.src = currentPair.a;
    imageElement.onload = fitImageToContainer;
  }

  // ---------------------------
  // Toggle image between 'a' and 'b' without resetting zoom/pan
  // ---------------------------
  function toggleImage() {
	  // Remove the onload event so that the new image doesn't trigger a refit.
	  imageElement.onload = null;
	  if (showingA) {
	    imageElement.src = currentPair.b;
	  } else {
	    imageElement.src = currentPair.a;
	  }
	  showingA = !showingA;
	}

  // ---------------------------
  // Random selection from dropdown
  // ---------------------------
  function chooseRandom() {
    const options = imageSelect.options;
    const randomIndex = Math.floor(Math.random() * options.length);
    imageSelect.selectedIndex = randomIndex;
    updateImagePair();
  }

  // ---------------------------
  // Zoom functions for buttons (use container center as pivot)
  // ---------------------------
  function zoomInButton() {
    const containerRect = container.getBoundingClientRect();
    const centerX = containerRect.width / 2;
    const centerY = containerRect.height / 2;
    const factor = 1.05;
    const newScale = scale * factor;
    offsetX = centerX - ((centerX - offsetX) * newScale/scale);
    offsetY = centerY - ((centerY - offsetY) * newScale/scale);
    scale = newScale;
    updateTransform();
  }

  function zoomOutButton() {
    const containerRect = container.getBoundingClientRect();
    const centerX = containerRect.width / 2;
    const centerY = containerRect.height / 2;
    const factor = 1.05;
    const newScale = scale / factor;
    offsetX = centerX - ((centerX - offsetX) * newScale/scale);
    offsetY = centerY - ((centerY - offsetY) * newScale/scale);
    scale = newScale;
    updateTransform();
  }

  // ---------------------------
  // Reset pan (and optionally refit image)
  // ---------------------------
  function resetPan() {
    fitImageToContainer();
  }

  // ---------------------------
  // Panning via mouse dragging
  // ---------------------------
  let isPanning = false;
  let startX, startY;
  let startOffsetX, startOffsetY;

  imageElement.addEventListener("mousedown", function(e) {
    isPanning = true;
    imageElement.classList.add("dragging");
    startX = e.clientX;
    startY = e.clientY;
    startOffsetX = offsetX;
    startOffsetY = offsetY;
    e.preventDefault();
  });

  document.addEventListener("mousemove", function(e) {
    if (!isPanning) return;
    const dx = e.clientX - startX;
    const dy = e.clientY - startY;
    offsetX = startOffsetX + dx;
    offsetY = startOffsetY + dy;
    updateTransform();
  });

  document.addEventListener("mouseup", function() {
    if (isPanning) {
      isPanning = false;
      imageElement.classList.remove("dragging");
    }
  });

  // ---------------------------
  // Zooming with the scroll wheel (centered on mouse pointer)
  // ---------------------------
  container.addEventListener("wheel", function(e) {
    e.preventDefault();
    const containerRect = container.getBoundingClientRect();
    // Mouse position relative to container
    const mouseX = e.clientX - containerRect.left;
    const mouseY = e.clientY - containerRect.top;
    const factor = e.deltaY < 0 ? 1.05 : 1/1.05;
    const newScale = scale * factor;
    // Adjust offsets so the point under the mouse stays fixed:
    offsetX = mouseX - ((mouseX - offsetX) * newScale/scale);
    offsetY = mouseY - ((mouseY - offsetY) * newScale/scale);
    scale = newScale;
    updateTransform();
  });

  // ---------------------------
  // Attach event listeners for buttons and dropdown.
  // ---------------------------
  toggleButton.addEventListener("click", toggleImage);
  imageSelect.addEventListener("change", updateImagePair);
  randomButton.addEventListener("click", chooseRandom);
  zoomInBtn.addEventListener("click", zoomInButton);
  zoomOutBtn.addEventListener("click", zoomOutButton);
  resetPanBtn.addEventListener("click", resetPan);

  // Initialize with the first image pair.
  updateImagePair();
</script>